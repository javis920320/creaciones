a:5:{s:8:"template";s:11619:"<!DOCTYPE html>
<html lang="fr">
<head>
<meta charset="utf-8"/>
<meta content="width=device-width, initial-scale=1" name="viewport"/>
<title>{{ keyword }}</title>
<link href="//fonts.googleapis.com/css?family=Open+Sans:400,600,300|Montserrat:400,700|Inconsolata" id="prefix_google_fonts-css" media="screen" rel="stylesheet" type="text/css"/>
<style rel="stylesheet" type="text/css">@charset "UTF-8"; html{font-family:sans-serif;-webkit-text-size-adjust:100%;-ms-text-size-adjust:100%}body{margin:0}footer,header,nav{display:block}a{background-color:transparent}a:active,a:hover{outline:0}h1{margin:.67em 0;font-size:2em}button{margin:0;font:inherit;color:inherit}button{overflow:visible}button{text-transform:none}button{-webkit-appearance:button;cursor:pointer}button::-moz-focus-inner{padding:0;border:0} *{-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box}:after,:before{-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box}html{font-size:10px;-webkit-tap-highlight-color:transparent}body{font-family:"Helvetica Neue",Helvetica,Arial,sans-serif;font-size:14px;line-height:1.42857143;color:#333;background-color:#fff}button{font-family:inherit;font-size:inherit;line-height:inherit}a{color:#337ab7;text-decoration:none}a:focus,a:hover{color:#23527c;text-decoration:underline}a:focus{outline:thin dotted;outline:5px auto -webkit-focus-ring-color;outline-offset:-2px}.sr-only{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0,0,0,0);border:0}h1,h3{font-family:inherit;font-weight:500;line-height:1.1;color:inherit}h1,h3{margin-top:20px;margin-bottom:10px}h1{font-size:36px}h3{font-size:24px}ul{margin-top:0;margin-bottom:10px}.container{padding-right:15px;padding-left:15px;margin-right:auto;margin-left:auto}@media (min-width:768px){.container{width:750px}}@media (min-width:992px){.container{width:970px}}@media (min-width:1200px){.container{width:1170px}}.row{margin-right:-15px;margin-left:-15px}.col-md-7,.col-sm-4,.col-sm-8,.col-xs-3,.col-xs-9{position:relative;min-height:1px;padding-right:15px;padding-left:15px}.col-xs-3,.col-xs-9{float:left}.col-xs-9{width:75%}.col-xs-3{width:25%}@media (min-width:768px){.col-sm-4,.col-sm-8{float:left}.col-sm-8{width:66.66666667%}.col-sm-4{width:33.33333333%}}@media (min-width:992px){.col-md-7{float:left}.col-md-7{width:58.33333333%}}.collapse{display:none;visibility:hidden}.caret{display:inline-block;width:0;height:0;margin-left:2px;vertical-align:middle;border-top:4px solid;border-right:4px solid transparent;border-left:4px solid transparent}.dropdown{position:relative}.dropdown-toggle:focus{outline:0}.nav{padding-left:0;margin-bottom:0;list-style:none}.nav>li{position:relative;display:block}.nav>li>a{position:relative;display:block;padding:10px 15px}.nav>li>a:focus,.nav>li>a:hover{text-decoration:none;background-color:#eee}.navbar-collapse{padding-right:15px;padding-left:15px;overflow-x:visible;-webkit-overflow-scrolling:touch;border-top:1px solid transparent;-webkit-box-shadow:inset 0 1px 0 rgba(255,255,255,.1);box-shadow:inset 0 1px 0 rgba(255,255,255,.1)}@media (min-width:768px){.navbar-collapse{width:auto;border-top:0;-webkit-box-shadow:none;box-shadow:none}.navbar-collapse.collapse{display:block!important;height:auto!important;padding-bottom:0;overflow:visible!important;visibility:visible!important}}.navbar-nav{margin:7.5px -15px}.navbar-nav>li>a{padding-top:10px;padding-bottom:10px;line-height:20px}@media (min-width:768px){.navbar-nav{float:left;margin:0}.navbar-nav>li{float:left}.navbar-nav>li>a{padding-top:15px;padding-bottom:15px}}@media (min-width:768px){.navbar-right{float:right!important;margin-right:-15px}}.container:after,.container:before,.nav:after,.nav:before,.navbar-collapse:after,.navbar-collapse:before,.row:after,.row:before{display:table;content:" "}.container:after,.nav:after,.navbar-collapse:after,.row:after{clear:both}@-ms-viewport{width:device-width}.has-drop-cap:not(:focus):first-letter{float:left;font-size:8.4em;line-height:.68;font-weight:100;margin:.05em .1em 0 0;text-transform:uppercase;font-style:normal}.has-drop-cap:not(:focus):after{content:"";display:table;clear:both;padding-top:14px}.wc-block-product-categories__button:not(:disabled):not([aria-disabled=true]):hover{background-color:#fff;color:#191e23;box-shadow:inset 0 0 0 1px #e2e4e7,inset 0 0 0 2px #fff,0 1px 1px rgba(25,30,35,.2)}.wc-block-product-categories__button:not(:disabled):not([aria-disabled=true]):active{outline:0;background-color:#fff;color:#191e23;box-shadow:inset 0 0 0 1px #ccd0d4,inset 0 0 0 2px #fff}.wc-block-product-search .wc-block-product-search__button:not(:disabled):not([aria-disabled=true]):hover{background-color:#fff;color:#191e23;box-shadow:inset 0 0 0 1px #e2e4e7,inset 0 0 0 2px #fff,0 1px 1px rgba(25,30,35,.2)}.wc-block-product-search .wc-block-product-search__button:not(:disabled):not([aria-disabled=true]):active{outline:0;background-color:#fff;color:#191e23;box-shadow:inset 0 0 0 1px #ccd0d4,inset 0 0 0 2px #fff} html{font-family:sans-serif;-webkit-text-size-adjust:100%;-ms-text-size-adjust:100%}body{margin:0}footer,header,nav{display:block}a{background-color:transparent}a:active,a:hover{outline:0}h1{font-size:2em;margin:.67em 0}button{color:inherit;font:inherit;margin:0}button{overflow:visible}button{text-transform:none}button{-webkit-appearance:button;cursor:pointer}button::-moz-focus-inner{border:0;padding:0}body,button{color:#4a4a4a;font-family:"Open Sans",sans-serif;font-size:14px;font-weight:300;line-height:1.625}h1,h3{clear:both;font-family:Montserrat,sans-serif}html{box-sizing:border-box}*,:after,:before{box-sizing:inherit}body{background:#fff}ul{margin:0 0 1.5em 0;padding:0 0 0 1.5em}ul{list-style:disc}a{color:#3598db}a:active,a:focus,a:hover{color:#258cd1}a:focus{outline:thin dotted}a:active,a:hover{outline:0}.site-header .nav li a{color:#4a4a4a;font-family:Montserrat,sans-serif;font-size:14px;text-transform:uppercase;font-weight:400;-webkit-transition:.3s;transition:.3s}@media (min-width:768px){.site-header .nav li a{margin:15px 5px 10px;padding:10px 10px;border-bottom:5px solid transparent}}@media (min-width:992px){.site-header .nav li a{font-size:15px;margin:20px 5px 15px}}.site-header .nav li a:focus,.site-header .nav li a:hover{color:#4a4a4a;text-decoration:none;background-color:transparent;border-bottom:5px solid #ef3e36}.navbar-collapse{border-top:none;box-shadow:none}#navbar-collapse-1{padding-left:0}.hamburger{display:block;float:right;position:relative;z-index:1000;overflow:hidden;margin:15px 0;padding:0;width:70px;height:40px;font-size:0;text-indent:-9999px;-webkit-appearance:none;-moz-appearance:none;appearance:none;box-shadow:none;border-radius:0;border:none;cursor:pointer;-webkit-transition:background .3s;transition:background .3s}.hamburger:focus{outline:0}@media (min-width:768px){.hamburger{display:none}}.hamburger span{display:block;position:absolute;top:19px;left:15px;right:15px;height:2px;background-color:#f3773b;-webkit-transition:background .3s;transition:background .3s}.hamburger span::after,.hamburger span::before{position:absolute;display:block;left:0;width:100%;height:2px;background-color:#f3773b;content:"";-webkit-transition-duration:.3s,.3s;transition-duration:.3s,.3s}.hamburger span::before{top:-12px;-webkit-transition-property:top,-webkit-transform;transition-property:top,-webkit-transform;transition-property:top,transform;transition-property:top,transform,-webkit-transform}.hamburger span::after{bottom:-12px;-webkit-transition-property:bottom,-webkit-transform;transition-property:bottom,-webkit-transform;transition-property:bottom,transform;transition-property:bottom,transform,-webkit-transform}button.hamburger,button.hamburger:focus,button.hamburger:hover{background-color:transparent;border-color:transparent;box-shadow:none}.sideNavBody{overflow-x:hidden;position:relative;right:0;-webkit-transition:all .3s ease;transition:all .3s ease}.nav>li>a:focus,.nav>li>a:hover{color:#fff;text-decoration:none;background-color:#f15952}.screen-reader-text{clip:rect(1px,1px,1px,1px);position:absolute!important;height:1px;width:1px;overflow:hidden}.screen-reader-text:focus{background-color:#f1f1f1;border-radius:3px;box-shadow:0 0 2px 2px rgba(0,0,0,.6);clip:auto!important;color:#21759b;display:block;font-size:14px;font-size:.875rem;font-weight:700;height:auto;left:5px;line-height:normal;padding:15px 23px 14px;text-decoration:none;top:5px;width:auto;z-index:100000}.site-content:after,.site-content:before,.site-footer:after,.site-footer:before,.site-header:after,.site-header:before{content:"";display:table}.site-content:after,.site-footer:after,.site-header:after{clear:both}.site-header{background-color:#fff;padding:0;border-bottom:1px solid #d1d1d1}.site-header .menu-container{padding:0}a.site-logo{display:block;width:176px;height:40px;margin:15px 0}@media (min-width:768px){a.site-logo{width:220px;height:50px;margin:10px 0}}@media (min-width:992px){a.site-logo{width:264px;height:60px;margin:10px 0}}.footer-container{background:-webkit-linear-gradient(rgba(0,0,0,.6),rgba(0,0,0,.6)),url(img/footer-bg.jpg);background:linear-gradient(rgba(0,0,0,.6),rgba(0,0,0,.6)),url(img/footer-bg.jpg);background-repeat:no-repeat;background-position:center;background-size:cover}.site-footer{padding:20px 0}.copyright{color:#fff;font-size:14px;padding:15px 0;text-align:center}@media (min-width:992px){.copyright{text-align:left}}.copyright span{font-size:14px} *{box-sizing:border-box}</style>
</head>
<body class="sideNavBody theme-birthme woocommerce-no-js group-blog">
<div class="hfeed site" id="page">
<a class="skip-link screen-reader-text" href="#">Skip to content</a>
<header class="site-header" id="masthead">
<div class="container">
<div class="row">
<div class="col-xs-9 col-sm-4 logo-container">
<h1 class="sr-only">BirthME, Doulas</h1>
<a class="site-logo" href="#" rel="home"></a>
</div>
<div class="col-xs-3 col-sm-8 menu-container">
<button class="hamburger">
<span>toggle menu</span>
</button>
<nav class="nav-primary">
<h3 class="sr-only">Primary Navigation</h3>
<div class="collapse navbar-collapse" id="navbar-collapse-1"><ul class="nav navbar-nav navbar-right" id="menu-primary-menu"><li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-home menu-item-25" id="menu-item-25"><a href="#" title="Home">Home</a></li>
<li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-has-children menu-item-131 dropdown" id="menu-item-131"><a aria-haspopup="true" class="dropdown-toggle" data-toggle="dropdown" href="#" title="Services">Services <span class="caret"></span></a>
</li>
<li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-22" id="menu-item-22"><a href="#" title="About">About</a></li>
<li class="menu-item menu-item-type-post_type menu-item-object-page current_page_parent menu-item-24" id="menu-item-24"><a href="#" title="Blog">Blog</a></li>
<li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-23" id="menu-item-23"><a href="#" title="Contact">Contact</a></li>
</ul></div> </nav>
</div>
</div>
</div>
</header>
<div class="site-content" id="content">
{{ text }}
</div>
<div class="footer-container">
<footer class="site-footer" id="colophon">
<div class="container">
<div class="row">
{{ links }}
</div>
</div>
</footer>
<div class="copyright">
<div class="container">
<div class="row">
<div class="col-md-7 footer-left">
<span>Copyright 2020 {{ keyword }}</div>
</div>
</div>
</div>
</div>
</div>
<link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet"/>
</body>
</html>";s:4:"text";s:30874:"<br>Although normally called by SecGen, secgen_local.rb scripts can be executed directly, and accept all the parameter inputs as command line arguments, and returns the output in JSON format to stdout. *release ([0-9]+)\", string:release);\nif (isnull(os_ver)) audit(AUDIT_UNKNOWN_APP_VER, \"Fedora\");\nos_ver = os_ver[1];\nif (! Como detectar, habilitar e desabilitar SMBv1, SMBv2 e SMBv3 no Windows How to detect, enable and disable SMBv1, SMBv2, and SMBv3 in Windows. )\n      raise BadcharError.new(state.encoded, 0, 0, 0)\n    end\n\n    buf\n  end\n\n  #\n  # Appends the encoded context portion.\n  #\n  def encode_end(state)\n    state.encoded += state.context\n  end\n\n  #\n  # Generate the instructions that will be used to produce a valid\n  # block after decoding using the sub instruction in conjunction with\n  # two UTF8/tolower safe values.\n  #\n  def try_sub(state, block)\n    buf   = \"\\x68\";\n    vbuf  = ''\n    ctx   = ''\n    carry = 0\n\n    block.each_byte { |b|\n      # It's impossible to reach 0x7f, 0x80, 0x81 with two subs\n      # of a value that is < 0x80 without NULLs.\n      return nil if (b == 0x80 or b == 0x81 or b == 0x7f)\n\n      x          = 0\n      y          = 0\n      attempts   = 0\n      prev_carry = carry\n\n      begin\n        carry = prev_carry\n\n        if (b > 0x80)\n          diff  = 0x100 - b\n          y     = rand(0x80 - diff - 1).to_i + 1\n          x     = (0x100 - (b - y + carry))\n          carry = 1\n        else\n          diff  = 0x7f - b\n          x     = rand(diff - 1) + 1\n          y     = (b + x + carry) & 0xff\n          carry = 0\n        end\n\n        attempts += 1\n\n        # Lame.\n        return nil if (attempts > 512)\n\n      end while (is_badchar(state, x) or is_badchar(state, y))\n\n      vbuf += [x].pack('C')\n      ctx  += [y].pack('C')\n    }\n\n    buf += vbuf + \"\\x5f\\x29\\x39\\x03\\x0c\\x24\"\n\n    state.context += ctx\n\n    return buf\n\n  end\n\n  #\n  # Generate instructions that will be used to produce a valid block after\n  # decoding using the add instruction in conjunction with two UTF8/tolower\n  # safe values.\n  #\n  def try_add(state, block)\n    buf  = \"\\x68\"\n    vbuf = ''\n    ctx  = ''\n\n    block.each_byte { |b|\n      # It's impossible to produce 0xff and 0x01 using two non-NULL,\n      # tolower safe, and UTF8 safe values.\n      return nil if (b == 0xff or b == 0x01 or b == 0x00)\n\n      attempts = 0\n\n      begin\n        xv = rand(b - 1) + 1\n\n        attempts += 1\n\n        # Lame.\n        return nil if (attempts > 512)\n\n      end while (is_badchar(state, xv) or is_badchar(state, b - xv))\n\n      vbuf += [xv].pack('C')\n      ctx  += [b - xv].pack('C')\n    }\n\n    buf += vbuf + \"\\x5f\\x01\\x39\\x03\\x0c\\x24\"\n\n    state.context += ctx\n\n    return buf\n  end\n\n  def is_badchar(state, val)\n    ((val >= 0x41 and val <= 0x5a) or val >= 0x80) or Rex::Text.badchar_index([val].pack('C'), state.badchars)\n  end\nend\n", "metasploitReliability": "", "metasploitHistory": ""}, "lastseen": "2019-10-22T12:14:40", "differentElements": ["description", "modified", "published", "sourceData", "sourceHref", "title"], "edition": 55}, {"bulletin": {"id": "MSF:AUXILIARY/SCANNER/SMB/SMB1", "hash": "d52b4a7349bfdfed69120e316a13882a", "type": "metasploit", "bulletinFamily": "exploit", "title": "SMBv1 Protocol Detection", "description": "Detect systems that support the SMBv1 protocol\n", "published": "2017-09-14T21:59:39", "modified": "2017-09-18T20:02:38", "cvss": {"score": 0.0, "vector": "NONE"}, "href": "", "reporter": "Rapid7", "references": [], "cvelist": [], "lastseen": "2019-10-22T16:26:00", "history": [], "viewCount": 255, "enchantments": {"score": {"value": 1.0, "vector": "NONE", "modified": "2019-10-22T16:26:00"}, "dependencies": {"references": [{"type": "thn", "idList": ["THN:9269E53DB7E4D99ED8A3314F02869A30"]}, {"type": "openvas", "idList": ["OPENVAS:1361412562310891968", "OPENVAS:1361412562310891961", "OPENVAS:1361412562310891967", "OPENVAS:1361412562310891962", "OPENVAS:1361412562310704546", "OPENVAS:1361412562310704545", "OPENVAS:1361412562310891966", "OPENVAS:1361412562310891965", "OPENVAS:1361412562310852742", "OPENVAS:1361412562310844204"]}, {"type": "mozilla", "idList": ["MFSA2019-34"]}, {"type": "ubuntu", "idList": ["USN-4162-1"]}, {"type": "qualysblog", "idList": ["QUALYSBLOG:F049AE2BB0739D7D9D8E368907DF1C29"]}, {"type": "suse", "idList": ["OPENSUSE-SU-2019:2348-1", "OPENSUSE-SU-2019:2344-1"]}, {"type": "kitploit", "idList": ["KITPLOIT:3183765424997503481"]}, {"type": "talosblog", "idList": ["TALOSBLOG:5A9BEF09DC8FF93E258E2D51361D11E8"]}], "modified": "2019-10-22T16:26:00"}}, "objectVersion": "1.4", "sourceHref": "https://github.com/rapid7/metasploit-framework/blob/master//modules/auxiliary/scanner/smb/smb1.rb", "sourceData": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  # Exploit mixins should go first\n  include Msf::Exploit::Remote::Tcp\n\n  # Scanner mixin should be near last\n  include Msf::Auxiliary::Scanner\n  include Msf::Auxiliary::Report\n\n  # Aliases for common classes\n  SIMPLE = Rex::Proto::SMB::SimpleClient\n  XCEPT  = Rex::Proto::SMB::Exceptions\n  CONST  = Rex::Proto::SMB::Constants\n\n  def initialize\n    super(\n      'Name'        => 'SMBv1 Protocol Detection',\n      'Description' => 'Detect systems that support the SMBv1 protocol',\n      'Author'      => 'Chance Johnson @loftwing',\n      'License'     => MSF_LICENSE\n    )\n\n    register_options([ Opt::RPORT(445) ])\n  end\n\n  # Modified from smb2 module by @hdm\n  # Fingerprint a single host\n  def run_host(ip)\n    begin\n      connect\n\n      # Only accept NT LM 0.12 dialect and WfW3.0\n      dialects = ['PC NETWORK PROGRAM 1.0',\n                  'LANMAN1.0',\n                  'Windows for Workgroups 3.1a',\n                  'LM1.2X002',\n                  'LANMAN2.1',\n                  'NT LM 0.12']\n      data     = dialects.collect { |dialect| \"\\x02\" + dialect + \"\\x00\" }.join('')\n\n      pkt = Rex::Proto::SMB::Constants::SMB_NEG_PKT.make_struct\n      pkt['Payload']['SMB'].v['Command'] = Rex::Proto::SMB::Constants::SMB_COM_NEGOTIATE\n      pkt['Payload']['SMB'].v['Flags1'] = 0x08\n      pkt['Payload']['SMB'].v['Flags2'] = 0xc801\n      pkt['Payload'].v['Payload']       = data\n\n      pkt['Payload']['SMB'].v['ProcessID']     = rand(0x10000)\n      pkt['Payload']['SMB'].v['MultiplexID']   = rand(0x10000)\n\n      sock.put(pkt.to_s)\n      res = sock.get_once\n      # expecting \\xff instead of \\xfe\n      if res && res.index(\"\\xffSMB\")\n        print_good(\"#{ip} supports SMBv1 dialect.\")\n        report_note(\n          host: ip,\n          proto: 'tcp',\n          sname: 'smb1',\n          port: rport,\n          type: \"supports SMB 1\"\n        )\n      end\n    rescue ::Rex::ConnectionError\n    rescue EOFError\n    rescue Errno::ECONNRESET\n    rescue ::Exception => e\n      print_error(\"#{rhost}: #{e.class} #{e} #{e.backtrace}\")\n    ensure\n      disconnect\n    end\n  end\nend\n", "metasploitReliability": "", "metasploitHistory": ""}, "lastseen": "2019-10-22T16:26:00", "differentElements": ["sourceData"], "edition": 56}, {"bulletin": {"id": "MSF:AUXILIARY/SCANNER/SMB/SMB1", "hash": "4a41415b4060c2616dffebb2ed6729b1", "type": "metasploit", "bulletinFamily": "exploit", "title": "SMBv1 Protocol Detection", "description": "Detect systems that support the SMBv1 protocol\n", "published": "2017-09-14T21:59:39", "modified": "2017-09-18T20:02:38", "cvss": {"score": 0.0, "vector": "NONE"}, "href": "", "reporter": "Rapid7", "references": [], "cvelist": [], "lastseen": "2019-10-22T20:02:27", "history": [], "viewCount": 257, "enchantments": {"score": {"value": 2.5, "vector": "NONE", "modified": "2019-10-22T20:02:27"}, "dependencies": {"references": [{"type": "threatpost", "idList": ["THREATPOST:9BC1B113CDD3C86D30DEB5648D4DB177"]}, {"type": "tenable", "idList": ["TENABLE:0233D53A82E16C59E35C51B21491BD62"]}, {"type": "thn", "idList": ["THN:9269E53DB7E4D99ED8A3314F02869A30"]}, {"type": "mozilla", "idList": ["MFSA2019-34"]}, {"type": "openvas", "idList": ["OPENVAS:1361412562310891968", "OPENVAS:1361412562310891967", "OPENVAS:1361412562310891961", "OPENVAS:1361412562310704546", "OPENVAS:1361412562310891962", "OPENVAS:1361412562310704545", "OPENVAS:1361412562310891966", "OPENVAS:1361412562310891965", "OPENVAS:1361412562310844204", "OPENVAS:1361412562310114148"]}, {"type": "ubuntu", "idList": ["USN-4162-1"]}, {"type": "qualysblog", "idList": ["QUALYSBLOG:F049AE2BB0739D7D9D8E368907DF1C29"]}, {"type": "suse", "idList": ["OPENSUSE-SU-2019:2348-1", "OPENSUSE-SU-2019:2344-1"]}, {"type": "kitploit", "idList": ["KITPLOIT:3183765424997503481"]}, {"type": "talosblog", "idList": ["TALOSBLOG:5A9BEF09DC8FF93E258E2D51361D11E8"]}], "modified": "2019-10-22T20:02:27"}}, "objectVersion": "1.4", "sourceHref": "https://github.com/rapid7/metasploit-framework/blob/master//modules/auxiliary/scanner/smb/smb1.rb", "sourceData": "", "metasploitReliability": "", "metasploitHistory": ""}, "lastseen": "2019-10-22T20:02:27", "differentElements": ["sourceData"], "edition": 57}, {"bulletin": {"id": "MSF:AUXILIARY/SCANNER/SMB/SMB1", "hash": "d52b4a7349bfdfed69120e316a13882a", "type": "metasploit", "bulletinFamily": "exploit", "title": "SMBv1 Protocol Detection", "description": "Detect systems that support the SMBv1 protocol\n", "published": "2017-09-14T21:59:39", "modified": "2017-09-18T20:02:38", "cvss": {"score": 0.0, "vector": "NONE"}, "href": "", "reporter": "Rapid7", "references": [], "cvelist": [], "lastseen": "2019-10-22T22:05:37", "history": [], "viewCount": 263, "enchantments": {"score": {"value": -1.3, "vector": "NONE", "modified": "2019-10-22T22:05:37"}, "dependencies": {"references": [{"type": "kitploit", "idList": ["KITPLOIT:3074882932405142153"]}, {"type": "talosblog", "idList": ["TALOSBLOG:6631705A9B0F56348E3E1A97469105A1"]}, {"type": "nessus", "idList": ["JUNIPER_JSA10956.NASL", "GOOGLE_CHROME_78_0_3904_87.NASL", "REDHAT-RHSA-2019-3281.NASL", "REDHAT-RHSA-2019-3286.NASL", "MACOSX_FUSION_VMSA_2019_0019.NASL", "OPENSUSE-2019-2418.NASL", "ORACLELINUX_ELSA-2019-3286.NASL", "SL_20191031_PHP_ON_SL7_X.NASL", "CENTOS_RHSA-2019-3193.NASL", "CENTOS_RHSA-2019-3210.NASL"]}], "modified": "2019-10-22T22:05:37"}}, "objectVersion": "1.4", "sourceHref": "https://github.com/rapid7/metasploit-framework/blob/master//modules/auxiliary/scanner/smb/smb1.rb", "sourceData": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  # Exploit mixins should go first\n  include Msf::Exploit::Remote::Tcp\n\n  # Scanner mixin should be near last\n  include Msf::Auxiliary::Scanner\n  include Msf::Auxiliary::Report\n\n  # Aliases for common classes\n  SIMPLE = Rex::Proto::SMB::SimpleClient\n  XCEPT  = Rex::Proto::SMB::Exceptions\n  CONST  = Rex::Proto::SMB::Constants\n\n  def initialize\n    super(\n      'Name'        => 'SMBv1 Protocol Detection',\n      'Description' => 'Detect systems that support the SMBv1 protocol',\n      'Author'      => 'Chance Johnson @loftwing',\n      'License'     => MSF_LICENSE\n    )\n\n    register_options([ Opt::RPORT(445) ])\n  end\n\n  # Modified from smb2 module by @hdm\n  # Fingerprint a single host\n  def run_host(ip)\n    begin\n      connect\n\n      # Only accept NT LM 0.12 dialect and WfW3.0\n      dialects = ['PC NETWORK PROGRAM 1.0',\n                  'LANMAN1.0',\n                  'Windows for Workgroups 3.1a',\n                  'LM1.2X002',\n                  'LANMAN2.1',\n                  'NT LM 0.12']\n      data     = dialects.collect { |dialect| \"\\x02\" + dialect + \"\\x00\" }.join('')\n\n      pkt = Rex::Proto::SMB::Constants::SMB_NEG_PKT.make_struct\n      pkt['Payload']['SMB'].v['Command'] = Rex::Proto::SMB::Constants::SMB_COM_NEGOTIATE\n      pkt['Payload']['SMB'].v['Flags1'] = 0x08\n      pkt['Payload']['SMB'].v['Flags2'] = 0xc801\n      pkt['Payload'].v['Payload']       = data\n\n      pkt['Payload']['SMB'].v['ProcessID']     = rand(0x10000)\n      pkt['Payload']['SMB'].v['MultiplexID']   = rand(0x10000)\n\n      sock.put(pkt.to_s)\n      res = sock.get_once\n      # expecting \\xff instead of \\xfe\n      if res && res.index(\"\\xffSMB\")\n        print_good(\"#{ip} supports SMBv1 dialect.\")\n        report_note(\n          host: ip,\n          proto: 'tcp',\n          sname: 'smb1',\n          port: rport,\n          type: \"supports SMB 1\"\n        )\n      end\n    rescue ::Rex::ConnectionError\n    rescue EOFError\n    rescue Errno::ECONNRESET\n    rescue ::Exception => e\n      print_error(\"#{rhost}: #{e.class} #{e} #{e.backtrace}\")\n    ensure\n      disconnect\n    end\n  end\nend\n", "metasploitReliability": "", "metasploitHistory": ""}, "lastseen": "2019-10-22T22:05:37", "differentElements": ["modified", "published"], "edition": 58}, {"bulletin": {"id": "MSF:AUXILIARY/SCANNER/SMB/SMB1", "hash": "321cba7dbb2921986893265ac3288c25", "type": "metasploit", "bulletinFamily": "exploit", "title": "SMBv1 Protocol Detection", "description": "Detect systems that support the SMBv1 protocol\n", "published": "1976-01-01T00:00:00", "modified": "1976-01-01T00:00:00", "cvss": {"score": 0.0, "vector": "NONE"}, "href": "", "reporter": "Rapid7", "references": [], "cvelist": [], "lastseen": "2019-11-06T08:35:16", "history": [], "viewCount": 263, "enchantments": {"score": {"value": 0.5, "vector": "NONE", "modified": "2019-11-06T08:35:16"}, "dependencies": {"references": [{"type": "kitploit", "idList": ["KITPLOIT:7323577050718865961"]}, {"type": "nessus", "idList": ["CISCO_PRIME_INFRASTRUCTURE_SA-20190515-PI-RCE.NASL", "SOLARIS10_X86_119060-73.NASL", "UBUNTU_USN-4170-3.NASL", "JIRA_CVE-2019-14999.NASL", "SOLARIS10_119059-74.NASL", "SOLARIS10_X86_125720-71.NASL", "SOLARIS10_125719-60.NASL", "SUSE_SU-2019-2890-1.NASL", "JUNIPER_JSA10974.NASL", "JUNIPER_JSA10965.NASL"]}, {"type": "openvas", "idList": ["OPENVAS:1361412562310143052", "OPENVAS:1361412562310143062", "OPENVAS:1361412562310143091"]}, {"type": "zeroscience", "idList": ["ZSL-2019-5541", "ZSL-2019-5540"]}, {"type": "ubuntu", "idList": ["USN-4170-3"]}, {"type": "ics", "idList": ["ICSMA-19-274-01"]}], "modified": "2019-11-06T08:35:16"}}, "objectVersion": "1.4", "sourceHref": "https://github.com/rapid7/metasploit-framework/blob/master//modules/auxiliary/scanner/smb/smb1.rb", "sourceData": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  # Exploit mixins should go first\n  include Msf::Exploit::Remote::Tcp\n\n  # Scanner mixin should be near last\n  include Msf::Auxiliary::Scanner\n  include Msf::Auxiliary::Report\n\n  # Aliases for common classes\n  SIMPLE = Rex::Proto::SMB::SimpleClient\n  XCEPT  = Rex::Proto::SMB::Exceptions\n  CONST  = Rex::Proto::SMB::Constants\n\n  def initialize\n    super(\n      'Name'        => 'SMBv1 Protocol Detection',\n      'Description' => 'Detect systems that support the SMBv1 protocol',\n      'Author'      => 'Chance Johnson @loftwing',\n      'License'     => MSF_LICENSE\n    )\n\n    register_options([ Opt::RPORT(445) ])\n  end\n\n  # Modified from smb2 module by @hdm\n  # Fingerprint a single host\n  def run_host(ip)\n    begin\n      connect\n\n      # Only accept NT LM 0.12 dialect and WfW3.0\n      dialects = ['PC NETWORK PROGRAM 1.0',\n                  'LANMAN1.0',\n                  'Windows for Workgroups 3.1a',\n                  'LM1.2X002',\n                  'LANMAN2.1',\n                  'NT LM 0.12']\n      data     = dialects.collect { |dialect| \"\\x02\" + dialect + \"\\x00\" }.join('')\n\n      pkt = Rex::Proto::SMB::Constants::SMB_NEG_PKT.make_struct\n      pkt['Payload']['SMB'].v['Command'] = Rex::Proto::SMB::Constants::SMB_COM_NEGOTIATE\n      pkt['Payload']['SMB'].v['Flags1'] = 0x08\n      pkt['Payload']['SMB'].v['Flags2'] = 0xc801\n      pkt['Payload'].v['Payload']       = data\n\n      pkt['Payload']['SMB'].v['ProcessID']     = rand(0x10000)\n      pkt['Payload']['SMB'].v['MultiplexID']   = rand(0x10000)\n\n      sock.put(pkt.to_s)\n      res = sock.get_once\n      # expecting \\xff instead of \\xfe\n      if res && res.index(\"\\xffSMB\")\n        print_good(\"#{ip} supports SMBv1 dialect.\")\n        report_note(\n          host: ip,\n          proto: 'tcp',\n          sname: 'smb1',\n          port: rport,\n          type: \"supports SMB 1\"\n        )\n      end\n    rescue ::Rex::ConnectionError\n    rescue EOFError\n    rescue Errno::ECONNRESET\n    rescue ::Exception => e\n      print_error(\"#{rhost}: #{e.class} #{e} #{e.backtrace}\")\n    ensure\n      disconnect\n    end\n  end\nend\n", "metasploitReliability": "", "metasploitHistory": ""}, "lastseen": "2019-11-06T08:35:16", "differentElements": ["modified", "published"], "edition": 59}, {"bulletin": {"id": "MSF:AUXILIARY/SCANNER/SMB/SMB1", "hash": "d52b4a7349bfdfed69120e316a13882a", "type": "metasploit", "bulletinFamily": "exploit", "title": "SMBv1 Protocol Detection", "description": "Detect systems that support the SMBv1 protocol\n", "published": "2017-09-14T21:59:39", "modified": "2017-09-18T20:02:38", "cvss": {"score": 0.0, "vector": "NONE"}, "href": "", "reporter": "Rapid7", "references": [], "cvelist": [], "lastseen": "2019-11-06T10:41:41", "history": [], "viewCount": 282, "enchantments": {"score": {"value": -0.3, "vector": "NONE", "modified": "2019-11-06T10:41:41"}, "dependencies": {"references": [{"type": "kitploit", "idList": ["KITPLOIT:7323577050718865961"]}, {"type": "nessus", "idList": ["SOLARIS10_119059-74.NASL", "CISCO_PRIME_INFRASTRUCTURE_SA-20190515-PI-RCE.NASL", "JIRA_CVE-2019-14999.NASL", "SOLARIS10_X86_119060-73.NASL", "UBUNTU_USN-4170-3.NASL", "SUSE_SU-2019-2890-1.NASL", "SOLARIS10_X86_125720-71.NASL", "SOLARIS10_125719-60.NASL", "JUNIPER_JSA10974.NASL", "JUNIPER_JSA10965.NASL"]}, {"type": "openvas", "idList": ["OPENVAS:1361412562310143052", "OPENVAS:1361412562310143062", "OPENVAS:1361412562310143091", "OPENVAS:1361412562310143090"]}, {"type": "zeroscience", "idList": ["ZSL-2019-5540", "ZSL-2019-5541"]}, {"type": "ics", "idList": ["ICSMA-19-274-01"]}], "modified": "2019-11-06T10:41:41"}}, "objectVersion": "1.4", "sourceHref": "https://github.com/rapid7/metasploit-framework/blob/master//modules/auxiliary/scanner/smb/smb1.rb", "sourceData": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  # Exploit mixins should go first\n  include Msf::Exploit::Remote::Tcp\n\n  # Scanner mixin should be near last\n  include Msf::Auxiliary::Scanner\n  include Msf::Auxiliary::Report\n\n  # Aliases for common classes\n  SIMPLE = Rex::Proto::SMB::SimpleClient\n  XCEPT  = Rex::Proto::SMB::Exceptions\n  CONST  = Rex::Proto::SMB::Constants\n\n  def initialize\n    super(\n      'Name'        => 'SMBv1 Protocol Detection',\n      'Description' => 'Detect systems that support the SMBv1 protocol',\n      'Author'      => 'Chance Johnson @loftwing',\n      'License'     => MSF_LICENSE\n    )\n\n    register_options([ Opt::RPORT(445) ])\n  end\n\n  # Modified from smb2 module by @hdm\n  # Fingerprint a single host\n  def run_host(ip)\n    begin\n      connect\n\n      # Only accept NT LM 0.12 dialect and WfW3.0\n      dialects = ['PC NETWORK PROGRAM 1.0',\n                  'LANMAN1.0',\n                  'Windows for Workgroups 3.1a',\n                  'LM1.2X002',\n                  'LANMAN2.1',\n                  'NT LM 0.12']\n      data     = dialects.collect { |dialect| \"\\x02\" + dialect + \"\\x00\" }.join('')\n\n      pkt = Rex::Proto::SMB::Constants::SMB_NEG_PKT.make_struct\n      pkt['Payload']['SMB'].v['Command'] = Rex::Proto::SMB::Constants::SMB_COM_NEGOTIATE\n      pkt['Payload']['SMB'].v['Flags1'] = 0x08\n      pkt['Payload']['SMB'].v['Flags2'] = 0xc801\n      pkt['Payload'].v['Payload']       = data\n\n      pkt['Payload']['SMB'].v['ProcessID']     = rand(0x10000)\n      pkt['Payload']['SMB'].v['MultiplexID']   = rand(0x10000)\n\n      sock.put(pkt.to_s)\n      res = sock.get_once\n      # expecting \\xff instead of \\xfe\n      if res && res.index(\"\\xffSMB\")\n        print_good(\"#{ip} supports SMBv1 dialect.\")\n        report_note(\n          host: ip,\n          proto: 'tcp',\n          sname: 'smb1',\n          port: rport,\n          type: \"supports SMB 1\"\n        )\n      end\n    rescue ::Rex::ConnectionError\n    rescue EOFError\n    rescue Errno::ECONNRESET\n    rescue ::Exception => e\n      print_error(\"#{rhost}: #{e.class} #{e} #{e.backtrace}\")\n    ensure\n      disconnect\n    end\n  end\nend\n", "metasploitReliability": "", "metasploitHistory": ""}, "lastseen": "2019-11-06T10:41:41", "differentElements": ["modified", "published"], "edition": 60}, {"bulletin": {"id": "MSF:AUXILIARY/SCANNER/SMB/SMB1", "hash": "321cba7dbb2921986893265ac3288c25", "type": "metasploit", "bulletinFamily": "exploit", "title": "SMBv1 Protocol Detection", "description": "Detect systems that support the SMBv1 protocol\n", "published": "1976-01-01T00:00:00", "modified": "1976-01-01T00:00:00", "cvss": {"score": 0.0, "vector": "NONE"}, "href": "", "reporter": "Rapid7", "references": [], "cvelist": [], "lastseen": "2019-11-23T17:16:10", "history": [], "viewCount": 282, "enchantments": {"score": {"value": -0.0, "vector": "NONE", "modified": "2019-11-23T17:16:10"}, "dependencies": {"references": [{"type": "talosblog", "idList": ["TALOSBLOG:F707E3F271E987A8739DBDECFEEFAE22"]}, {"type": "openvas", "idList": ["OPENVAS:1361412562310143164", "OPENVAS:1361412562310143162"]}, {"type": "nessus", "idList": ["SUSE_SU-2019-3034-1.NASL", "SUSE_SU-2019-3030-1.NASL", "SUSE_SU-2019-3033-1.NASL", "FEDORA_2019-6BC8BE9D84.NASL", "FEDORA_2019-8B0BA02338.NASL", "FEDORA_2019-9C2AD3B018.NASL", "REDHAT-RHSA-2019-3929.NASL", "REDHAT-RHSA-2019-3927.NASL", "REDHAT-RHSA-2019-3942.NASL", "REDHAT-RHSA-2019-3940.NASL"]}], "modified": "2019-11-23T17:16:10"}}, "objectVersion": "1.4", "sourceHref": "https://github.com/rapid7/metasploit-framework/blob/master//modules/auxiliary/scanner/smb/smb1.rb", "sourceData": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  # Exploit mixins should go first\n  include Msf::Exploit::Remote::Tcp\n\n  # Scanner mixin should be near last\n  include Msf::Auxiliary::Scanner\n  include Msf::Auxiliary::Report\n\n  # Aliases for common classes\n  SIMPLE = Rex::Proto::SMB::SimpleClient\n  XCEPT  = Rex::Proto::SMB::Exceptions\n  CONST  = Rex::Proto::SMB::Constants\n\n  def initialize\n    super(\n      'Name'        => 'SMBv1 Protocol Detection',\n      'Description' => 'Detect systems that support the SMBv1 protocol',\n      'Author'      => 'Chance Johnson @loftwing',\n      'License'     => MSF_LICENSE\n    )\n\n    register_options([ Opt::RPORT(445) ])\n  end\n\n  # Modified from smb2 module by @hdm\n  # Fingerprint a single host\n  def run_host(ip)\n    begin\n      connect\n\n      # Only accept NT LM 0.12 dialect and WfW3.0\n      dialects = ['PC NETWORK PROGRAM 1.0',\n                  'LANMAN1.0',\n                  'Windows for Workgroups 3.1a',\n                  'LM1.2X002',\n                  'LANMAN2.1',\n                  'NT LM 0.12']\n      data     = dialects.collect { |dialect| \"\\x02\" + dialect + \"\\x00\" }.join('')\n\n      pkt = Rex::Proto::SMB::Constants::SMB_NEG_PKT.make_struct\n      pkt['Payload']['SMB'].v['Command'] = Rex::Proto::SMB::Constants::SMB_COM_NEGOTIATE\n      pkt['Payload']['SMB'].v['Flags1'] = 0x08\n      pkt['Payload']['SMB'].v['Flags2'] = 0xc801\n      pkt['Payload'].v['Payload']       = data\n\n      pkt['Payload']['SMB'].v['ProcessID']     = rand(0x10000)\n      pkt['Payload']['SMB'].v['MultiplexID']   = rand(0x10000)\n\n      sock.put(pkt.to_s)\n      res = sock.get_once\n      # expecting \\xff instead of \\xfe\n      if res && res.index(\"\\xffSMB\")\n        print_good(\"#{ip} supports SMBv1 dialect.\")\n        report_note(\n          host: ip,\n          proto: 'tcp',\n          sname: 'smb1',\n          port: rport,\n          type: \"supports SMB 1\"\n        )\n      end\n    rescue ::Rex::ConnectionError\n    rescue EOFError\n    rescue Errno::ECONNRESET\n    rescue ::Exception => e\n      print_error(\"#{rhost}: #{e.class} #{e} #{e.backtrace}\")\n    ensure\n      disconnect\n    end\n  end\nend\n", "metasploitReliability": "", "metasploitHistory": ""}, "lastseen": "2019-11-23T17:16:10", "differentElements": ["modified", "published"], "edition": 61}, {"bulletin": {"id": "MSF:AUXILIARY/SCANNER/SMB/SMB1", "hash": "d52b4a7349bfdfed69120e316a13882a", "type": "metasploit", "bulletinFamily": "exploit", "title": "SMBv1 Protocol Detection", "description": "Detect systems that support the SMBv1 protocol\n", "published": "2017-09-14T21:59:39", "modified": "2017-09-18T20:02:38", "cvss": {"score": 0.0, "vector": "NONE"}, "href": "", "reporter": "Rapid7", "references": [], "cvelist": [], "lastseen": "2019-11-23T19:16:51", "history": [], "viewCount": 282, "enchantments": {"score": {"value": -0.0, "vector": "NONE", "modified": "2019-11-23T19:16:51"}, "dependencies": {"references": [{"type": "talosblog", "idList": ["TALOSBLOG:F707E3F271E987A8739DBDECFEEFAE22"]}, {"type": "openvas", "idList": ["OPENVAS:1361412562310143164"]}, {"type": "nessus", "idList": ["FEDORA_2019-8B0BA02338.NASL", "FEDORA_2019-9C2AD3B018.NASL", "REDHAT-RHSA-2019-3929.NASL", "REDHAT-RHSA-2019-3927.NASL", "FEDORA_2019-074BF7D2D3.NASL", "FEDORA_2019-5AE4FD9203.NASL", "FEDORA_2019-6BC8BE9D84.NASL", "OPENSUSE-2019-2541.NASL", "SUSE_SU-2019-3033-1.NASL", "FEDORA_2019-0182D0B304.NASL"]}], "modified": "2019-11-23T19:16:51"}}, "objectVersion": "1.4", "sourceHref": "https://github.com/rapid7/metasploit-framework/blob/master//modules/auxiliary/scanner/smb/smb1.rb", "sourceData": "##\n# This module requires Metasploit: https://metasploit.com/download\n# Current source: https://github.com/rapid7/metasploit-framework\n##\n\nclass MetasploitModule < Msf::Auxiliary\n  # Exploit mixins should go first\n  include Msf::Exploit::Remote::Tcp\n\n  # Scanner mixin should be near last\n  include Msf::Auxiliary::Scanner\n  include Msf::Auxiliary::Report\n\n  # Aliases for common classes\n  SIMPLE = Rex::Proto::SMB::SimpleClient\n  XCEPT  = Rex::Proto::SMB::Exceptions\n  CONST  = Rex::Proto::SMB::Constants\n\n  def initialize\n    super(\n      'Name'        => 'SMBv1 Protocol Detection',\n      'Description' => 'Detect systems that support the SMBv1 protocol',\n      'Author'      => 'Chance Johnson @loftwing',\n      'License'     => MSF_LICENSE\n    )\n\n    register_options([ Opt::RPORT(445) ])\n  end\n\n  # Modified from smb2 module by @hdm\n  # Fingerprint a single host\n  def run_host(ip)\n    begin\n      connect\n\n      # Only accept NT LM 0.12 dialect and WfW3.0\n      dialects = ['PC NETWORK PROGRAM 1.0',\n                  'LANMAN1.0',\n                  'Windows for Workgroups 3.1a',\n                  'LM1.2X002',\n                  'LANMAN2.1',\n                  'NT LM 0.12']\n      data     = dialects.collect { |dialect| \"\\x02\" + dialect + \"\\x00\" }.join('')\n\n      pkt = Rex::Proto::SMB::Constants::SMB_NEG_PKT.make_struct\n      pkt['Payload']['SMB'].v['Command'] = Rex::Proto::SMB::Constants::SMB_COM_NEGOTIATE\n      pkt['Payload']['SMB'].v['Flags1'] = 0x08\n      pkt['Payload']['SMB'].v['Flags2'] = 0xc801\n      pkt['Payload'].v['Payload']       = data\n\n      pkt['Payload']['SMB'].v['ProcessID']     = rand(0x10000)\n      pkt['Payload']['SMB'].v['MultiplexID']   = rand(0x10000)\n\n      sock.put(pkt.to_s)\n      res = sock.get_once\n      # expecting \\xff instead of \\xfe\n      if res && res.index(\"\\xffSMB\")\n        print_good(\"#{ip} supports SMBv1 dialect.\")\n        report_note(\n          host: ip,\n          proto: 'tcp',\n          sname: 'smb1',\n          port: rport,\n          type: \"supports SMB 1\"\n        )\n      end\n    rescue ::Rex::ConnectionError\n    rescue EOFError\n    rescue Errno::ECONNRESET\n    rescue ::Exception => e\n      print_error(\"#{rhost}: #{e.class} #{e} #{e.backtrace}\")\n    ensure\n      disconnect\n    end\n  end\nend\n", "metasploitReliability": "", "metasploitHistory": ""}, "lastseen": "2019-11-23T19:16:51", "differentElements": ["description", "modified", "published", "sourceData", "sourceHref", "title"], "edition": 62}, {"bulletin": {"id": "MSF:AUXILIARY/SCANNER/SMB/SMB1", "hash": "dafc56bf6b97010d950e395296012eaf", "type": "metasploit", "bulletinFamily": "exploit", "title": "Oracle Application Testing Suite WebLogic Server Administration Console War Deployment", "description": "This module abuses a feature in WebLogic Server's Administration Console to install a malicious Java application in order to gain remote code execution.  Alas, it\n# does produce tolower safe and UTF8 safe payloads. ';\n    when :invalid_server\n      print_error 'The server you specified was invalid';\n    when :not_on_primary\n      print_error 'You must be on the primary domain controller to do that';\n    when :user_not_found\n      print_error 'User did not exist! Courses focus on real-world skills and applicability, preparing you for real-life challenges. \n\n    \n    \n    #ruby modules/encoders/string/base64/secgen_local/local.rb --strings_to_encode \"encode this\" --strings_to_encode \"and this\"\n    BASE64 Encoder\n     Encoding '[\"encode this\", \"and this\"]'\n     Encoded: [\"ZW5jb2RlIHRoaXM=\", \"YW5kIHRoaXM=\"]\n    [\"ZW5jb2RlIHRoaXM=\",\"YW5kIHRoaXM=\"]\n\n  \n\n\n[ ! This removes the requirement for end users of the framework to understand SecGen's configuration specification. In the meantime, the scanners can only scan to a single Synology NAS ](<https://www.usenix.org/conference/ase17/workshop-program/presentation/schreuders> \"Z.C. The sysadmin\n        login is added to the local SQL Server using native SQL clients and\n        stored procedures. <br> <br>No bull. A Librarian-Puppet file is created to manage modules, and some required modules may be obtained via PuppetForge, and therefore an Internet connection is required when building the project. This encoder has been found useful on\n        situations where '&' (0x26) is a badchar. For example, a scenario could specify the creation of a system with a remotely exploitable vulnerability that would result in user-level compromise, and a locally exploitable flaw that would result in root-level compromise. <br>";s:7:"keyword";s:26:"auxiliary scanner smb smb1";s:5:"links";s:5458:"<a href='https://www.creacionescrea.com.co/forum/23794f-l%27assistant-google-est-pr%C3%AAt-%C3%A0-vous-aider'>L'assistant Google Est Prêt à Vous Aider</a>,
<a href='https://www.creacionescrea.com.co/forum/23794f-garconne-fashion-center'>Garconne Fashion Center</a>,
<a href='https://www.creacionescrea.com.co/forum/23794f-Kit-radio-volet-roulant'>Kit Radio Volet Roulant</a>,
<a href='https://www.creacionescrea.com.co/forum/23794f-promotion-filet-de-b%C5%93uf-carrefour'>Promotion Filet De Bœuf Carrefour</a>,
<a href='https://www.creacionescrea.com.co/forum/23794f-play-blues-on-piano'>Play Blues On Piano</a>,
<a href='https://www.creacionescrea.com.co/forum/23794f-comment-r%C3%A9aliser-un-circuit-imprim%C3%A9-pdf'>Comment Réaliser Un Circuit Imprimé Pdf</a>,
<a href='https://www.creacionescrea.com.co/forum/23794f-mory-kant%C3%A9---yeke-yeke-clip-officiel'>Mory Kanté - Yeke Yeke Clip Officiel</a>,
<a href='https://www.creacionescrea.com.co/forum/23794f-municipales-la-circulaire-castaner'>Municipales La Circulaire Castaner</a>,
<a href='https://www.creacionescrea.com.co/forum/23794f-la-vie-mensong%C3%A8re-des-adultes-epub'>La Vie Mensongère Des Adultes Epub</a>,
<a href='https://www.creacionescrea.com.co/forum/23794f-prix-cheval-fiscal-83'>Prix Cheval Fiscal 83</a>,
<a href='https://www.creacionescrea.com.co/forum/23794f-changer-une-trajectoire'>Changer Une Trajectoire</a>,
<a href='https://www.creacionescrea.com.co/forum/23794f-Prix-briquet-Carrefour'>Prix Briquet Carrefour</a>,
<a href='https://www.creacionescrea.com.co/forum/23794f-compo-real-alav%C3%A9s'>Compo Real Alavés</a>,
<a href='https://www.creacionescrea.com.co/forum/23794f-bj%C3%B6rn-andresen-2018'>Björn Andresen 2018</a>,
<a href='https://www.creacionescrea.com.co/forum/23794f-briquet-temp%C3%AAte-laguiole'>Briquet Tempête Laguiole</a>,
<a href='https://www.creacionescrea.com.co/forum/23794f-direction-en-anglais-google-traduction'>Direction En Anglais Google Traduction</a>,
<a href='https://www.creacionescrea.com.co/forum/23794f-maison-en-carton-%C3%A0-fabriquer'>Maison En Carton à Fabriquer</a>,
<a href='https://www.creacionescrea.com.co/forum/23794f-calcul-urinaire-chat-hom%C3%A9opathie'>Calcul Urinaire Chat Homéopathie</a>,
<a href='https://www.creacionescrea.com.co/forum/23794f-lidl-fruits-et-l%C3%A9gumes'>Lidl Fruits Et Légumes</a>,
<a href='https://www.creacionescrea.com.co/forum/23794f-%C3%82ne-nain-Alsace'>Âne Nain Alsace</a>,
<a href='https://www.creacionescrea.com.co/forum/23794f-box-somfy-occasion'>Box Somfy Occasion</a>,
<a href='https://www.creacionescrea.com.co/forum/23794f-partition-disney-guitare'>Partition Disney Guitare</a>,
<a href='https://www.creacionescrea.com.co/forum/23794f-anissa-jebbari-date-de-naissance'>Anissa Jebbari Date De Naissance</a>,
<a href='https://www.creacionescrea.com.co/forum/23794f-verbes-falloir-au-pass%C3%A9-simple'>Verbes Falloir Au Passé Simple</a>,
<a href='https://www.creacionescrea.com.co/forum/23794f-recette-bouillette-curry'>Recette Bouillette Curry</a>,
<a href='https://www.creacionescrea.com.co/forum/23794f-cartoon-network%3A-punch-time-explosion-xl'>Cartoon Network: Punch Time Explosion Xl</a>,
<a href='https://www.creacionescrea.com.co/forum/23794f-famille-bich-suisse'>Famille Bich Suisse</a>,
<a href='https://www.creacionescrea.com.co/forum/23794f-valise-55x35x25-amazon'>Valise 55x35x25 Amazon</a>,
<a href='https://www.creacionescrea.com.co/forum/23794f-song-for-guy-piano-tab'>Song For Guy Piano Tab</a>,
<a href='https://www.creacionescrea.com.co/forum/23794f-bombe-lacrymog%C3%A8ne-professionnel'>Bombe Lacrymogène Professionnel</a>,
<a href='https://www.creacionescrea.com.co/forum/23794f-r%C3%A9sultats-admission-agr%C3%A9gation-interne-lettres-classiques-2020'>Résultats Admission Agrégation Interne Lettres Classiques 2020</a>,
<a href='https://www.creacionescrea.com.co/forum/23794f-s%C3%A9rie-ncis-streaming-gratuit'>Série Ncis Streaming Gratuit</a>,
<a href='https://www.creacionescrea.com.co/forum/23794f-tu-pars-quand-en-anglais'>Tu Pars Quand En Anglais</a>,
<a href='https://www.creacionescrea.com.co/forum/23794f-ours-bony-et-glasha'>Ours Bony Et Glasha</a>,
<a href='https://www.creacionescrea.com.co/forum/23794f-servitude-de-tour-d%27%C3%A9chelle'>Servitude De Tour D'échelle</a>,
<a href='https://www.creacionescrea.com.co/forum/23794f-musique-tahitienne-traditionnelle-gratuite'>Musique Tahitienne Traditionnelle Gratuite</a>,
<a href='https://www.creacionescrea.com.co/forum/23794f-Bouquet-de-nerfs'>Bouquet De Nerfs</a>,
<a href='https://www.creacionescrea.com.co/forum/23794f-kevin-fortun%C3%A9-instagram'>Kevin Fortuné Instagram</a>,
<a href='https://www.creacionescrea.com.co/forum/23794f-la-chaine-d%27%C3%A9nergie-d%27un-objet-technique-6eme'>La Chaine D'énergie D'un Objet Technique 6eme</a>,
<a href='https://www.creacionescrea.com.co/forum/23794f-faire-un-site-web-raspberry'>Faire Un Site Web Raspberry</a>,
<a href='https://www.creacionescrea.com.co/forum/23794f-article-r-2324-27-du-code-de-la-sant%C3%A9-publique'>Article R 2324-27 Du Code De La Santé Publique</a>,
<a href='https://www.creacionescrea.com.co/forum/23794f-march%C3%A9-rungis-superficie'>Marché Rungis Superficie</a>,
<a href='https://www.creacionescrea.com.co/forum/23794f-les-circuits-%C3%A9lectroniques'>Les Circuits électroniques</a>,
<a href='https://www.creacionescrea.com.co/forum/23794f-battle-frontier-pokemon-game'>Battle Frontier Pokemon Game</a>,
";s:7:"expired";i:-1;}